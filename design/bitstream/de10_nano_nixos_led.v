
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module de10_nano_nixos_led(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_SCK,
	output		          		ADC_SDI,
	input 		          		ADC_SDO,

	//////////// ARDUINO //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// HDMI //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		          		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		          		HDMI_TX_DE,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// HPS //////////
	output		    [14:0]		HPS_DDR3_ADDR,
	output		     [2:0]		HPS_DDR3_BA,
	output		          		HPS_DDR3_CAS_N,
	output		          		HPS_DDR3_CKE,
	output		          		HPS_DDR3_CK_N,
	output		          		HPS_DDR3_CK_P,
	output		          		HPS_DDR3_CS_N,
	output		     [3:0]		HPS_DDR3_DM,
	inout 		    [31:0]		HPS_DDR3_DQ,
	inout 		     [3:0]		HPS_DDR3_DQS_N,
	inout 		     [3:0]		HPS_DDR3_DQS_P,
	output		          		HPS_DDR3_ODT,
	output		          		HPS_DDR3_RAS_N,
	output		          		HPS_DDR3_RESET_N,
	input 		          		HPS_DDR3_RZQ,
	output		          		HPS_DDR3_WE_N,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// GPIO_0, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire hps_fpga_reset_n;
wire                fpga_clk_50;
// connection of internal logics
assign fpga_clk_50 = FPGA_CLK1_50;

wire [7:0]  f2h_axi_s0_awid                       ;//                     f2h_axi_s0.awid
wire [31:0] f2h_axi_s0_awaddr                     ;//                               .awaddr
wire [3:0]  f2h_axi_s0_awlen                      ;//                               .awlen
wire [2:0]  f2h_axi_s0_awsize                     ;//                               .awsize
wire [1:0]  f2h_axi_s0_awburst                    ;//                               .awburst
wire [1:0]  f2h_axi_s0_awlock                     ;//                               .awlock
wire [3:0]  f2h_axi_s0_awcache                    ;//                               .awcache
wire [2:0]  f2h_axi_s0_awprot                     ;//                               .awprot
wire        f2h_axi_s0_awvalid                    ;//                               .awvalid
wire        f2h_axi_s0_awready                    ;//                               .awready
wire [4:0]  f2h_axi_s0_awuser                     ;//                               .awuser
wire [7:0]  f2h_axi_s0_wid                        ;//                               .wid
wire [31:0] f2h_axi_s0_wdata                      ;//                               .wdata
wire [3:0]  f2h_axi_s0_wstrb                      ;//                               .wstrb
wire        f2h_axi_s0_wlast                      ;//                               .wlast
wire        f2h_axi_s0_wvalid                     ;//                               .wvalid
wire        f2h_axi_s0_wready                     ;//                               .wready
wire [7:0]  f2h_axi_s0_bid                        ;//                               .bid
wire [1:0]  f2h_axi_s0_bresp                      ;//                               .bresp
wire        f2h_axi_s0_bvalid                     ;//                               .bvalid
wire        f2h_axi_s0_bready                     ;//                               .bready
wire [7:0]  f2h_axi_s0_arid                       ;//                               .arid
wire [31:0] f2h_axi_s0_araddr                     ;//                               .araddr
wire [3:0]  f2h_axi_s0_arlen                      ;//                               .arlen
wire [2:0]  f2h_axi_s0_arsize                     ;//                               .arsize
wire [1:0]  f2h_axi_s0_arburst                    ;//                               .arburst
wire [1:0]  f2h_axi_s0_arlock                     ;//                               .arlock
wire [3:0]  f2h_axi_s0_arcache                    ;//                               .arcache
wire [2:0]  f2h_axi_s0_arprot                     ;//                               .arprot
wire        f2h_axi_s0_arvalid                    ;//                               .arvalid
wire        f2h_axi_s0_arready                    ;//                               .arready
wire [4:0]  f2h_axi_s0_aruser                     ;//                               .aruser
wire [7:0]  f2h_axi_s0_rid                        ;//                               .rid
wire [31:0] f2h_axi_s0_rdata                      ;//                               .rdata
wire [1:0]  f2h_axi_s0_rresp                      ;//                               .rresp
wire        f2h_axi_s0_rlast                      ;//                               .rlast
wire        f2h_axi_s0_rvalid                     ;//                               .rvalid
wire        f2h_axi_s0_rready                     ;//                               .rready

wire        mm_bridge_fpga_m0_waitrequest         ;//              mm_bridge_fpga_m0.waitrequest
wire [31:0] mm_bridge_fpga_m0_readdata            ;//                               .readdata
wire        mm_bridge_fpga_m0_readdatavalid       ;//                               .readdatavalid
wire [0:0]  mm_bridge_fpga_m0_burstcount          ;//                               .burstcount
wire [31:0] mm_bridge_fpga_m0_writedata           ;//                               .writedata
wire [9:0]  mm_bridge_fpga_m0_address             ;//                               .address
wire        mm_bridge_fpga_m0_write               ;//                               .write
wire        mm_bridge_fpga_m0_read                ;//                               .read
wire [3:0]  mm_bridge_fpga_m0_byteenable          ;//                               .byteenable
wire        mm_bridge_fpga_m0_debugaccess         ;//                               .debugaccess

//=======================================================
//  Structural coding
//=======================================================
soc_system u0(
               //Clock&Reset
               .clk_clk(FPGA_CLK1_50),                                      //                            clk.clk
               .reset_reset_n(hps_fpga_reset_n),                            //                          reset.reset_n
               //HPS ddr3
               .memory_mem_a(HPS_DDR3_ADDR),                                //                         memory.mem_a
               .memory_mem_ba(HPS_DDR3_BA),                                 //                               .mem_ba
               .memory_mem_ck(HPS_DDR3_CK_P),                               //                               .mem_ck
               .memory_mem_ck_n(HPS_DDR3_CK_N),                             //                               .mem_ck_n
               .memory_mem_cke(HPS_DDR3_CKE),                               //                               .mem_cke
               .memory_mem_cs_n(HPS_DDR3_CS_N),                             //                               .mem_cs_n
               .memory_mem_ras_n(HPS_DDR3_RAS_N),                           //                               .mem_ras_n
               .memory_mem_cas_n(HPS_DDR3_CAS_N),                           //                               .mem_cas_n
               .memory_mem_we_n(HPS_DDR3_WE_N),                             //                               .mem_we_n
               .memory_mem_reset_n(HPS_DDR3_RESET_N),                       //                               .mem_reset_n
               .memory_mem_dq(HPS_DDR3_DQ),                                 //                               .mem_dq
               .memory_mem_dqs(HPS_DDR3_DQS_P),                             //                               .mem_dqs
               .memory_mem_dqs_n(HPS_DDR3_DQS_N),                           //                               .mem_dqs_n
               .memory_mem_odt(HPS_DDR3_ODT),                               //                               .mem_odt
               .memory_mem_dm(HPS_DDR3_DM),                                 //                               .mem_dm
               .memory_oct_rzqin(HPS_DDR3_RZQ),                             //                               .oct_rzqin

               .hps_0_h2f_reset_reset_n(hps_fpga_reset_n),                  //                hps_0_h2f_reset.reset_n

               .f2h_axi_s0_awid(f2h_axi_s0_awid),
               .f2h_axi_s0_awaddr(f2h_axi_s0_awaddr),
               .f2h_axi_s0_awlen(f2h_axi_s0_awlen),
               .f2h_axi_s0_awsize(f2h_axi_s0_awsize),
               .f2h_axi_s0_awburst(f2h_axi_s0_awburst),
               .f2h_axi_s0_awlock(f2h_axi_s0_awlock),
               .f2h_axi_s0_awcache(f2h_axi_s0_awcache),
               .f2h_axi_s0_awprot(f2h_axi_s0_awprot),
               .f2h_axi_s0_awvalid(f2h_axi_s0_awvalid),
               .f2h_axi_s0_awready(f2h_axi_s0_awready),
               .f2h_axi_s0_awuser(f2h_axi_s0_awuser),
               .f2h_axi_s0_wid(f2h_axi_s0_wid),
               .f2h_axi_s0_wdata(f2h_axi_s0_wdata),
               .f2h_axi_s0_wstrb(f2h_axi_s0_wstrb),
               .f2h_axi_s0_wlast(f2h_axi_s0_wlast),
               .f2h_axi_s0_wvalid(f2h_axi_s0_wvalid),
               .f2h_axi_s0_wready(f2h_axi_s0_wready),
               .f2h_axi_s0_bid(f2h_axi_s0_bid),
               .f2h_axi_s0_bresp(f2h_axi_s0_bresp),
               .f2h_axi_s0_bvalid(f2h_axi_s0_bvalid),
               .f2h_axi_s0_bready(f2h_axi_s0_bready),
               .f2h_axi_s0_arid(f2h_axi_s0_arid),
               .f2h_axi_s0_araddr(f2h_axi_s0_araddr),
               .f2h_axi_s0_arlen(f2h_axi_s0_arlen),
               .f2h_axi_s0_arsize(f2h_axi_s0_arsize),
               .f2h_axi_s0_arburst(f2h_axi_s0_arburst),
               .f2h_axi_s0_arlock(f2h_axi_s0_arlock),
               .f2h_axi_s0_arcache(f2h_axi_s0_arcache),
               .f2h_axi_s0_arprot(f2h_axi_s0_arprot),
               .f2h_axi_s0_arvalid(f2h_axi_s0_arvalid),
               .f2h_axi_s0_arready(f2h_axi_s0_arready),
               .f2h_axi_s0_aruser(f2h_axi_s0_aruser),
               .f2h_axi_s0_rid(f2h_axi_s0_rid),
               .f2h_axi_s0_rdata(f2h_axi_s0_rdata),
               .f2h_axi_s0_rresp(f2h_axi_s0_rresp),
               .f2h_axi_s0_rlast(f2h_axi_s0_rlast),
               .f2h_axi_s0_rvalid(f2h_axi_s0_rvalid),
               .f2h_axi_s0_rready(f2h_axi_s0_rready),

               .mm_bridge_fpga_m0_waitrequest(mm_bridge_fpga_m0_waitrequest),
               .mm_bridge_fpga_m0_readdata(mm_bridge_fpga_m0_readdata),
               .mm_bridge_fpga_m0_readdatavalid(mm_bridge_fpga_m0_readdatavalid),
               .mm_bridge_fpga_m0_burstcount(mm_bridge_fpga_m0_burstcount),
               .mm_bridge_fpga_m0_writedata(mm_bridge_fpga_m0_writedata),
               .mm_bridge_fpga_m0_address(mm_bridge_fpga_m0_address),
               .mm_bridge_fpga_m0_write(mm_bridge_fpga_m0_write),
               .mm_bridge_fpga_m0_read(mm_bridge_fpga_m0_read),
               .mm_bridge_fpga_m0_byteenable(mm_bridge_fpga_m0_byteenable),
               .mm_bridge_fpga_m0_debugaccess(mm_bridge_fpga_m0_debugaccess),
           );

wire blink;
wire [2:0] status;
amaranth_top amaranth_top(
    .clk50(fpga_clk_50),
    .rst(~hps_fpga_reset_n),
    .blink(blink),
    .status(status),
    .button(KEY[0]),
    .GPIO_0_OUT(GPIO_0[35:34]),
    .GPIO_0_IN(GPIO_0[33:0]),
    .GPIO_1_OUT(GPIO_1[35:34]),
    .GPIO_1_IN(GPIO_1[33:0]),

    .f2h_axi_s0_awid(f2h_axi_s0_awid),
    .f2h_axi_s0_awaddr(f2h_axi_s0_awaddr),
    .f2h_axi_s0_awlen(f2h_axi_s0_awlen),
    .f2h_axi_s0_awsize(f2h_axi_s0_awsize),
    .f2h_axi_s0_awburst(f2h_axi_s0_awburst),
    .f2h_axi_s0_awlock(f2h_axi_s0_awlock),
    .f2h_axi_s0_awcache(f2h_axi_s0_awcache),
    .f2h_axi_s0_awprot(f2h_axi_s0_awprot),
    .f2h_axi_s0_awvalid(f2h_axi_s0_awvalid),
    .f2h_axi_s0_awready(f2h_axi_s0_awready),
    .f2h_axi_s0_awuser(f2h_axi_s0_awuser),
    .f2h_axi_s0_wid(f2h_axi_s0_wid),
    .f2h_axi_s0_wdata(f2h_axi_s0_wdata),
    .f2h_axi_s0_wstrb(f2h_axi_s0_wstrb),
    .f2h_axi_s0_wlast(f2h_axi_s0_wlast),
    .f2h_axi_s0_wvalid(f2h_axi_s0_wvalid),
    .f2h_axi_s0_wready(f2h_axi_s0_wready),
    .f2h_axi_s0_bid(f2h_axi_s0_bid),
    .f2h_axi_s0_bresp(f2h_axi_s0_bresp),
    .f2h_axi_s0_bvalid(f2h_axi_s0_bvalid),
    .f2h_axi_s0_bready(f2h_axi_s0_bready),
    .f2h_axi_s0_arid(f2h_axi_s0_arid),
    .f2h_axi_s0_araddr(f2h_axi_s0_araddr),
    .f2h_axi_s0_arlen(f2h_axi_s0_arlen),
    .f2h_axi_s0_arsize(f2h_axi_s0_arsize),
    .f2h_axi_s0_arburst(f2h_axi_s0_arburst),
    .f2h_axi_s0_arlock(f2h_axi_s0_arlock),
    .f2h_axi_s0_arcache(f2h_axi_s0_arcache),
    .f2h_axi_s0_arprot(f2h_axi_s0_arprot),
    .f2h_axi_s0_arvalid(f2h_axi_s0_arvalid),
    .f2h_axi_s0_arready(f2h_axi_s0_arready),
    .f2h_axi_s0_aruser(f2h_axi_s0_aruser),
    .f2h_axi_s0_rid(f2h_axi_s0_rid),
    .f2h_axi_s0_rdata(f2h_axi_s0_rdata),
    .f2h_axi_s0_rresp(f2h_axi_s0_rresp),
    .f2h_axi_s0_rlast(f2h_axi_s0_rlast),
    .f2h_axi_s0_rvalid(f2h_axi_s0_rvalid),
    .f2h_axi_s0_rready(f2h_axi_s0_rready),

    .mm_bridge_fpga_m0_waitrequest(mm_bridge_fpga_m0_waitrequest),
    .mm_bridge_fpga_m0_readdata(mm_bridge_fpga_m0_readdata),
    .mm_bridge_fpga_m0_readdatavalid(mm_bridge_fpga_m0_readdatavalid),
    .mm_bridge_fpga_m0_burstcount(mm_bridge_fpga_m0_burstcount),
    .mm_bridge_fpga_m0_writedata(mm_bridge_fpga_m0_writedata),
    .mm_bridge_fpga_m0_address(mm_bridge_fpga_m0_address),
    .mm_bridge_fpga_m0_write(mm_bridge_fpga_m0_write),
    .mm_bridge_fpga_m0_read(mm_bridge_fpga_m0_read),
    .mm_bridge_fpga_m0_byteenable(mm_bridge_fpga_m0_byteenable),
    .mm_bridge_fpga_m0_debugaccess(mm_bridge_fpga_m0_debugaccess),
);

assign LED[0] = blink;
assign LED[3:1] = status;

endmodule
